<?php

namespace App\Models;

use DB;
use DateTime;
use DateTimeZone;
use Illuminate\Support\Facades\Auth;

class Transaction extends BaseModel
{

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */

    protected $table = 'transaction';
    public $primaryKey = 'id';
    protected $fillable = ['t_id', 'username', 'cardtype_id', 'cardtype', 'card_number', 'amount', 'sms_amount', 'service_fee', 'low_fee', 'card_fee', 'card_holdername', 'phone', 'payment_method_id', 'payment_method', 'status', 'expiry_date', 'card_cvv', 'errorCode', 'memo', 'transaction_id', 'parent', 'child', 'rr_date', 'token'];


    public static function getList()
    {
        $arr_transaction = array();

        $list = self::orderBy('t_id', 'DESC')->orderBy('created_at', 'DESC')->get();
        foreach($list as $transaction)
            array_push($arr_transaction, self::getDetail($transaction->id));
        return $arr_transaction;
    }

    public static function getAll($user = null, $shop_list = null)
    {
        $arr_transaction = array();

        $list = self::orderBy('t_id', 'DESC')->orderBy('created_at', 'DESC')->get();
        foreach($list as $transaction){

            if($user != null){

                // check name
                if($shop_list == null){
                    if($transaction->username == $user->name){
                        array_push($arr_transaction, self::getDetail($transaction->id));
                    }
                }
                else {

                    if(in_array($transaction->username, $shop_list))
                        array_push($arr_transaction, self::getDetail($transaction->id));
                }
            }
            else
                array_push($arr_transaction, self::getDetail($transaction->id));
        }

        return $arr_transaction;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static function setRRDate()
    {
        $list = self::orderBy('t_id', 'DESC')->orderBy('created_at', 'DESC')->get();
        foreach($list as $transaction){
            $user = User::getUserByName($transaction->username);
            if($user != null){

                if($user->type != '1'){
                    $shop = Shop::getShopByName($user->name);
                    $pay_cycle = PayCycle::findById($shop->s_paycycle_id);

                    $rr_date = date('Y-m-d', strtotime($transaction->created_at . '+ 210 day'));
                    $rr_year = substr($rr_date,0,4);
                    $rr_month = substr($rr_date,5,2);
                    $rr_date = $rr_year . '-' . $rr_month . '-' . self::getMonthDates(intval($rr_year), intval($rr_month));

                    // check week end....
                    $week_day = date('N', strtotime($rr_date));
                    if($week_day == 7){
                        $rr_date = date('Y-m-d', strtotime($rr_date . ' +1 day'));
                    }
                    else if($week_day == 6){
                        $rr_date = date('Y-m-d', strtotime($rr_date . ' -1 day'));
                    }

                }
                else {
                    $rr_date = date('Y-m-d', strtotime('1999-01-01'));
                }

                $transaction = Transaction::findById($transaction->id);
                $transaction->rr_date = $rr_date;
                $transaction->save();
            }
        }
    }

    public static function getRRDate($paycycle_id)
    {
        if($paycycle_id > 2){

            $rr_date = date('Y-m-d', strtotime('+ 210 day'));
            $rr_year = substr($rr_date,0,4);
            $rr_month = substr($rr_date,5,2);
            $rr_date = $rr_year . '-' . $rr_month . '-' . self::getMonthDates(intval($rr_year), intval($rr_month));

            // check week end....
            $week_day = date('N', strtotime($rr_date));
            if($week_day == 7){
                $rr_date = date('Y-m-d', strtotime($rr_date . ' +1 day'));
            }
            else if($week_day == 6){
                $rr_date = date('Y-m-d', strtotime($rr_date . ' -1 day'));
            }

        }
        else {
            $rr_date = date('Y-m-d', strtotime('1999-01-01'));
        }

        return $rr_date;
    }

    public static function getMonthDates($year, $month)
    {
        $arr_date_max = array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
        if($month == 2){
            if($year % 4 == 0)
                return 29;
        }

        return $arr_date_max[$month-1];
    }


    public static function getRRAmount($output_date, $user)
    {
        $total = 0;
        $output_date = str_replace('年', '-', str_replace('日', '', str_replace('月', '-', $output_date)));

        $list = self::getAll($user);
        foreach($list as $transaction){

            $rr_date = date('Y-m-d', strtotime($transaction->rr_date));
            if(($rr_date == $output_date) && ($transaction->status == '成功')){
                $total += ceil($transaction->amount * 0.05);
            }
        }

        return $total;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function getAllByUser($start_date, $end_date, $user, $shop_list = null)
    {
        $start_date_obj = new DateTime($start_date, new DateTimeZone('Asia/Tokyo'));
        $end_date_obj = new DateTime($end_date, new DateTimeZone('Asia/Tokyo'));

        // filter
        $arr_list = array();
        $list = Transaction::getAll($user, $shop_list);
        foreach($list as $item){

            // check date
            $created_at = new DateTime($item->created_at, new DateTimeZone('Asia/Tokyo'));
            $created_at->setTime(0, 0);
            if(($created_at >= $start_date_obj) && ($created_at <= $end_date_obj)) {
                array_push($arr_list, $item);
            }
        }

        return $arr_list;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function getDetail($id)
    {
        $transaction = self::where('id', $id)->first();
        
        // merchant, shop
        $user = User::where('name', '=', $transaction->username)->first();
        if($user->type == '1'){
            $transaction->merchant = Merchant::where('name', '=', $transaction->username)->first();
            $pay_cycle = PayCycle::findById(1);
        }
        else {
            $transaction->shop = Shop::where('name', '=', $transaction->username)->first();
            $transaction->merchant = Merchant::where('name', '=', $transaction->shop->member_id)->first();
            $pay_cycle = PayCycle::findById($transaction->shop->s_paycycle_id);
        }

        // pay cycle
        $transaction->pay_cycle = $pay_cycle->name;

        // user type
        $transaction->userType = intval($user->type);
        return $transaction;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static function getLastId()
    {
        $statement = DB::select("SHOW TABLE STATUS LIKE 'tb_transaction'");
        return $statement[0]->Auto_increment;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function checkCard($card_id, $transaction){

        if($card_id != -1){
            if($card_id != $transaction->cardtype_id)
                return false;
        }

        return true;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function getTotalCount($list, $status, $card_id = -1)
    {
        $total = 0;
        foreach($list as $transaction){

            if($status == ''){
                if(self::checkCard($card_id, $transaction))
                    $total++;
            }
            else  {
                if($transaction->status == $status){
                    if(self::checkCard($card_id, $transaction))
                        $total++;
                }
            }
        }

        return $total;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function getTotalAmount($list, $status, $card_id = -1)
    {
        $totalAmount = 0;
        foreach($list as $transaction){

            if($status == ''){
                if(self::checkCard($card_id, $transaction))
                    $totalAmount += $transaction->amount;
            }
            else {
                if($transaction->status == $status){
                    if(self::checkCard($card_id, $transaction))
                        $totalAmount += $transaction->amount;
                }
            }
        }

        return $totalAmount;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function getSMSCountByCard($list, $card_id)
    {
        $total = 0;
        foreach($list as $transaction){
            if($transaction->payment_method == 'SMS決済'){
                if(($transaction->status == '成功') && ($transaction->cardtype_id == $card_id))
                    $total++;
            }
        }

        return $total;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function checkToken($token)
    {
        $transaction = self::where('token', $token)->first();
        if($transaction != null)
            return true;
        return false;
    }
}
